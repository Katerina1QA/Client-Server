Client_Server
1) Прочитать про клиент-серверную архитектуру
Главные «действующие лица»: · клиент – компьютерное устройство, которое отсылает запросы серверу, касающиеся выполнения определенных задач или предоставления конкретной информации. · сервер – компьютерное устройство, гораздо мощнее обычного ПК.
2) Что ткое HTTP и HTTPS
HTTP - Hyper text transfer protocol - протокол передачи гипертекста. HTTP предлагает набор правил и стандартов, которые регулируют способ передачи любой информации во Всемирной паутине. По умолчанию данный протокол использует 80-ый порт.
HTTPS - Hyper text transfer protocol secure - защищенный протокол передачи гипертекста.
Это продвинутая и безопасная версия HTTP. Для коммуникации данных используется 443-ий порт. Данный протокол позволяет обеспечить безопасность транзакций путем шифрования всего трафика с помощью SSL. Это комбинация протокола SSL/TLS и HTTP. Обеспечивает зашифрованную и безопасную идентификацию сетевого сервера.

3) HTTP методы
- GET
- POST
- HEAD
- PUT
- DELETE
- CONNECT
- OPTIONS
- TRACE
- PATCH

4) HTTP статус коды сервера
100 - Continue
200 - OK
201 - Created
300 - Redirect
400 - Client error
401 - Unauthorised
500 - Server error

5) Что такое ядро браузера
Ядро браузера можно разделить на две части: движок рендеринга и движок JS. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т.д), организацию информации и расчет режима отображения веб-страницы, а затем вывод её на монитор или принтер.
 
6) Какие браузеры какиие ядра используют

- Trident (ядро IE)
- Gecko (ядро Firefox)
- Presto (pre-Opera kernel)
- Webkit (ядро safari, прототип ядра Chrome, открытый исходный код)
- Blink 
IE (до 9) = Trident + Jscript
IE (после 9) = трезубец + чакра
360=Trident+Blink 
Sogou = Trident + WebKit
Firefox=Gecko+JagerMonkey 
Safari=webkit=webcore+jscore 
Chrome=Blink+v8 
Opera=Blink+v8

7) Что такое API

API (Application Programming Interface — программный интерфейс приложения, или интерфейс программирования приложений) — специальный протокол для взаимодействия компьютерных программ, который позволяет использовать функции одного приложения внутри другого.

8. Что такое ендпоинты
 
Эндпоинт (в переводе с англ. — конечная точка) представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения. 
9) URL (URI, URL, URN)

URI (uniform resource identifier) identifies a resource (text document, image file, etc)
URL (uniform resource locator) is a subset of the URIs that include a network location
URN (uniform resource name) is a subset of URIs that include a name within a given space, but no location
URI (унифицированный идентификатор ресурса) идентифицирует ресурс (текстовый документ, файл изображения и т. д.).
URL-адрес (унифицированный указатель ресурса) — это подмножество URI, включающее сетевое расположение.
URN (унифицированное имя ресурса) — это подмножество URI, которые включают имя в заданном пространстве, но не местоположение.

10) Идемпотентные HTTP методы

- OPRIONS
- GET
- HEAD
- PUT
- DELETE

11) Безопасные HTTP методы
- OPTIONS 
- GET
- HEAD

Безопасные методы - это те, которые можно кэшировать и предварительно загружать без ущерба для ресурсов.。

12) Иденфикация, Аутентификация, Авторизация

Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.


13) Что такое IP
 
IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.


14) Что такое порт, сколько портов у Linux сервера
порты (< 65536)
Сетевые порты - это механизм, с помощью которого операционная система определяет какой именно программе необходимо передать сетевой пакет. Здесь можно привести пример с домом. Например, почтальону необходимо доставить посылку. Он доставляет посылку к дому, это IP адрес компьютера. А дальше в самом доме уже должны разобраться в какую квартиру направить эту посылку. Номер квартиры - это уже порт.

15) Уровни OSI

1 уровень. Физический (physical). Единицей нагрузки (PDU) здесь является бит. Кроме единиц и нулей физический уровень не знает ничего. На этом уровне работают провода, патч панели, сетевые концентраторы (хабы, которые сейчас уже сложно найти в привычных нам сетях), сетевые адаптеры. Именно сетевые адаптеры и ничего более из компьютера. Сам сетевой адаптер принимает последовательность бит и передает её дальше.

2 уровень. Канальный (data link). PDU - кадр (frame). На этом уровне появляется адресация. Адресом является MAC адрес. Канальный уровень ответственен за доставку кадров адресату и их целостность. В привычных нам сетях на канальном уровне работает протокол ARP. Адресация второго уровня работает только в пределах одного сетевого сегмента и ничего не знает о маршрутизации - этим занимается вышестоящий уровень. Соответственно, устройства, работающие на L2 - коммутаторы, мосты и драйвер сетевого адаптера.

3 уровень. Сетевой (network). PDU пакет (packet). Наиболее распространенным протоколом (дальше не буду говорить про “наиболее распространенный” - статья для новичков и с экзотикой они, как правило,  не сталкиваются) тут является IP. Адресация происходит по IP-адресам, которые состоят из 32 битов. Протокол маршрутизируемый, то есть пакет способен попасть в любую часть сети через какое-то количество маршрутизаторов. На L3 работают маршрутизаторы.

4 уровень. Транспортный (transport). PDU сегмент (segment)/датаграмма (datagram). На этом уровне появляются понятия портов. Тут трудятся TCP и UDP. Протоколы этого уровня отвечают за прямую связь между приложениями и за надежность доставки информации. Например, TCP умеет запрашивать повтор передачи данных в случае, если данные приняты неверно или не все. Так же TCP может менять скорость передачи данных, если сторона приема не успевает принять всё (TCP Window Size).

Следующие уровни “правильно” реализованы лишь в RFC. На практике же, протоколы описанные на следующих уровнях работают одновременно на нескольких уровнях модели OSI, поэтому нет четкого разделения на сеансовый и представительский уровни. В связи с этим в настоящее время основным используемым стеком является TCP/IP, о котором поговорим чуть ниже.

5 уровень. Сеансовый (session). PDU данные (data). Управляет сеансом связи, обменом информации, правами. Протоколы - L2TP, PPTP.

6 уровень. Представительский (presentation). PDU данные (data). Преставление и шифрование данных. JPEG, ASCII, MPEG.

7 уровень. Прикладной (application). PDU данные (data). Самый многочисленный и разнообразный уровень. На нем выполняются все высокоуровненвые протоколы. Такие как POP, SMTP, RDP, HTTP и т.д. Протоколы здесь не должны задумываться о маршрутизации или гарантии доставки информации - этим занимаются нижестоящие уровни. На 7 уровне необходима лишь реализации конкретных действий, например получение html-кода или email-сообщения конкретному адресату.


16) Хедеры http запросов

Заголовки могут быть сгруппированы по следующим контекстам:
Основные заголовки применяется как к запросам, так и к ответам, но не имеет отношения к данным, передаваемым в теле.
Заголовки запроса содержит больше информации о ресурсе, который нужно получить, или о клиенте, запрашивающем ресурс.
Заголовки ответа (en-US) содержат дополнительную информацию об ответе, например его местонахождение, или о сервере, предоставившем его.
Заголовки сущности содержат информацию о теле ресурса, например его длину содержимого или тип MIME.
Сквозные заголовки
     Эти заголовки должны быть переданы конечному получателю сообщения: серверу для запроса или клиенту для ответа. Промежуточные прокси-серверы должны повторно передавать эти заголовки без изменений, а кеши должны их хранить.
Хоп-хоп заголовки (Хоп-хоп заголовки)
     Эти заголовки имеют смысл только для одного соединения транспортного уровня и не должны повторно передаваться прокси или кешироваться. Обратите внимание, что с помощью общего заголовка Connection могут быть установлены только заголовки переходов.